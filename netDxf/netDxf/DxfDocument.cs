namespace netDxf
{
    using netDxf.Blocks;
    using netDxf.Collections;
    using netDxf.Entities;
    using netDxf.Header;
    using netDxf.IO;
    using netDxf.Objects;
    using netDxf.Tables;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.InteropServices;

    public sealed class DxfDocument : DxfObject
    {
        private string name;
        internal Dictionary<string, DxfObject> AddedObjects;
        internal long NumHandles;
        internal int DimensionBlocksGenerated;
        internal int GroupNamesGenerated;
        private readonly List<string> comments;
        private readonly HeaderVariables drawingVariables;
        private netDxf.Collections.ApplicationRegistries appRegistries;
        private BlockRecords blocks;
        private netDxf.Collections.DimensionStyles dimStyles;
        private netDxf.Collections.Layers layers;
        private netDxf.Collections.Linetypes linetypes;
        private netDxf.Collections.TextStyles textStyles;
        private netDxf.Collections.UCSs ucss;
        private netDxf.Collections.Views views;
        private netDxf.Collections.VPorts vports;
        private readonly List<netDxf.Entities.Arc> arcs;
        private readonly List<Circle> circles;
        private readonly List<Dimension> dimensions;
        private readonly List<netDxf.Entities.Ellipse> ellipses;
        private readonly List<Solid> solids;
        private readonly List<Trace> traces;
        private readonly List<Face3d> faces3d;
        private readonly List<Insert> inserts;
        private readonly List<netDxf.Entities.Line> lines;
        private readonly List<Point> points;
        private readonly List<PolyfaceMesh> polyfaceMeshes;
        private readonly List<LwPolyline> lwPolylines;
        private readonly List<netDxf.Entities.Polyline> polylines;
        private readonly List<Text> texts;
        private readonly List<MText> mTexts;
        private readonly List<Hatch> hatches;
        private readonly List<netDxf.Entities.Spline> splines;
        private readonly List<Image> images;
        private readonly List<MLine> mLines;
        private readonly List<Ray> rays;
        private readonly List<XLine> xlines;
        private readonly List<netDxf.Entities.Viewport> viewports;
        private readonly List<Mesh> meshes;
        private readonly List<Leader> leaders;
        private readonly List<Tolerance> tolerances;
        private readonly List<Underlay> underlays;
        private readonly List<Wipeout> wipeouts;
        private readonly List<AttributeDefinition> attributeDefinitions;
        private MLineStyles mlineStyles;
        private netDxf.Collections.ImageDefinitions imageDefs;
        private netDxf.Collections.UnderlayDgnDefinitions underlayDgnDefs;
        private netDxf.Collections.UnderlayDwfDefinitions underlayDwfDefs;
        private netDxf.Collections.UnderlayPdfDefinitions underlayPdfDefs;
        private netDxf.Collections.Groups groups;
        private netDxf.Collections.Layouts layouts;
        private string activeLayout;
        private netDxf.Objects.RasterVariables rasterVariables;

        public DxfDocument() : this(new HeaderVariables())
        {
        }

        public DxfDocument(DxfVersion version) : this(variables1)
        {
            HeaderVariables variables1 = new HeaderVariables {
                AcadVer = version
            };
        }

        public DxfDocument(HeaderVariables drawingVariables) : this(drawingVariables, true)
        {
        }

        internal DxfDocument(HeaderVariables drawingVariables, bool createDefaultObjects) : base("DOCUMENT")
        {
            List<string> list1 = new List<string> { "Dxf file generated by netDxf https://netdxf.codeplex.com, Copyright(C) 2009-2016 Daniel Carvajal, Licensed under LGPL" };
            this.comments = list1;
            base.Owner = null;
            this.drawingVariables = drawingVariables;
            this.NumHandles = this.AsignHandle(0L);
            this.DimensionBlocksGenerated = 0;
            this.GroupNamesGenerated = 0;
            Dictionary<string, DxfObject> dictionary1 = new Dictionary<string, DxfObject> {
                { 
                    base.Handle,
                    this
                }
            };
            this.AddedObjects = dictionary1;
            this.activeLayout = "Model";
            this.arcs = new List<netDxf.Entities.Arc>();
            this.ellipses = new List<netDxf.Entities.Ellipse>();
            this.dimensions = new List<Dimension>();
            this.faces3d = new List<Face3d>();
            this.solids = new List<Solid>();
            this.traces = new List<Trace>();
            this.inserts = new List<Insert>();
            this.lwPolylines = new List<LwPolyline>();
            this.polylines = new List<netDxf.Entities.Polyline>();
            this.polyfaceMeshes = new List<PolyfaceMesh>();
            this.lines = new List<netDxf.Entities.Line>();
            this.circles = new List<Circle>();
            this.points = new List<Point>();
            this.texts = new List<Text>();
            this.mTexts = new List<MText>();
            this.hatches = new List<Hatch>();
            this.splines = new List<netDxf.Entities.Spline>();
            this.images = new List<Image>();
            this.mLines = new List<MLine>();
            this.rays = new List<Ray>();
            this.xlines = new List<XLine>();
            this.viewports = new List<netDxf.Entities.Viewport>();
            this.meshes = new List<Mesh>();
            this.leaders = new List<Leader>();
            this.tolerances = new List<Tolerance>();
            this.underlays = new List<Underlay>();
            this.wipeouts = new List<Wipeout>();
            this.attributeDefinitions = new List<AttributeDefinition>();
            if (createDefaultObjects)
            {
                this.AddDefaultObjects();
            }
        }

        private void AddDefaultObjects()
        {
            this.vports = new netDxf.Collections.VPorts(this, null);
            this.views = new netDxf.Collections.Views(this, null);
            this.appRegistries = new netDxf.Collections.ApplicationRegistries(this, null);
            this.layers = new netDxf.Collections.Layers(this, null);
            this.linetypes = new netDxf.Collections.Linetypes(this, null);
            this.textStyles = new netDxf.Collections.TextStyles(this, null);
            this.dimStyles = new netDxf.Collections.DimensionStyles(this, null);
            this.mlineStyles = new MLineStyles(this, null);
            this.ucss = new netDxf.Collections.UCSs(this, null);
            this.blocks = new BlockRecords(this, null);
            this.imageDefs = new netDxf.Collections.ImageDefinitions(this, null);
            this.underlayDgnDefs = new netDxf.Collections.UnderlayDgnDefinitions(this, null);
            this.underlayDwfDefs = new netDxf.Collections.UnderlayDwfDefinitions(this, null);
            this.underlayPdfDefs = new netDxf.Collections.UnderlayPdfDefinitions(this, null);
            this.groups = new netDxf.Collections.Groups(this, null);
            this.layouts = new netDxf.Collections.Layouts(this, null);
            this.layers.Add(Layer.Default);
            this.linetypes.Add(Linetype.ByLayer);
            this.linetypes.Add(Linetype.ByBlock);
            this.linetypes.Add(Linetype.Continuous);
            this.textStyles.Add(TextStyle.Default);
            this.appRegistries.Add(ApplicationRegistry.Default);
            this.dimStyles.Add(DimensionStyle.Default);
            this.mlineStyles.Add(MLineStyle.Default);
            this.layouts.Add(Layout.ModelSpace);
            this.RasterVariables = new netDxf.Objects.RasterVariables();
        }

        private void AddDimensionStyleOverrides(Dimension dim, bool assignHandle)
        {
            if (dim.StyleOverrides.TryGetValue(DimensionStyleOverrideType.TextStyle, out DimensionStyleOverride @override))
            {
                TextStyle item = (TextStyle) @override.Value;
                dim.StyleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.textStyles.Add(item, assignHandle));
                this.textStyles.References[item.Name].Add(dim);
            }
            if (dim.StyleOverrides.TryGetValue(DimensionStyleOverrideType.LeaderArrow, out @override))
            {
                Block item = (Block) @override.Value;
                if (item > null)
                {
                    dim.StyleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.blocks.Add(item, assignHandle));
                    this.blocks.References[item.Name].Add(dim);
                }
            }
            if (dim.StyleOverrides.TryGetValue(DimensionStyleOverrideType.DimArrow1, out @override))
            {
                Block item = (Block) @override.Value;
                if (item > null)
                {
                    dim.StyleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.blocks.Add(item, assignHandle));
                    this.blocks.References[item.Name].Add(dim);
                }
            }
            if (dim.StyleOverrides.TryGetValue(DimensionStyleOverrideType.DimArrow2, out @override))
            {
                Block item = (Block) @override.Value;
                if (item > null)
                {
                    dim.StyleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.blocks.Add(item, assignHandle));
                    this.blocks.References[item.Name].Add(dim);
                }
            }
            if (dim.StyleOverrides.TryGetValue(DimensionStyleOverrideType.DimLineLinetype, out @override))
            {
                Linetype item = (Linetype) @override.Value;
                dim.StyleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.linetypes.Add(item, assignHandle));
                this.linetypes.References[item.Name].Add(dim);
            }
            if (dim.StyleOverrides.TryGetValue(DimensionStyleOverrideType.ExtLine1Linetype, out @override))
            {
                Linetype item = (Linetype) @override.Value;
                dim.StyleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.linetypes.Add(item, assignHandle));
                this.linetypes.References[item.Name].Add(dim);
            }
            if (dim.StyleOverrides.TryGetValue(DimensionStyleOverrideType.ExtLine2Linetype, out @override))
            {
                Linetype item = (Linetype) @override.Value;
                dim.StyleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.linetypes.Add(item, assignHandle));
                this.linetypes.References[item.Name].Add(dim);
            }
        }

        public void AddEntity(EntityObject entity)
        {
            this.AddEntity(entity, false, true);
        }

        public void AddEntity(IEnumerable<EntityObject> entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException("entities");
            }
            foreach (EntityObject obj2 in entities)
            {
                this.AddEntity(obj2);
            }
        }

        internal void AddEntity(EntityObject entity, bool isBlockEntity, bool assignHandle)
        {
            Underlay underlay;
            if (entity == null)
            {
                throw new ArgumentNullException("entity");
            }
            if ((entity.Owner != null) && !isBlockEntity)
            {
                throw new ArgumentException("The entity already belongs to a document. Clone it instead.", "entity");
            }
            if (assignHandle || string.IsNullOrEmpty(entity.Handle))
            {
                this.NumHandles = entity.AsignHandle(this.NumHandles);
            }
            if (!isBlockEntity)
            {
                entity.Owner = this.layouts[this.activeLayout].AssociatedBlock;
                this.layouts.References[this.activeLayout].Add(entity);
            }
            switch (entity.Type)
            {
                case EntityType.Arc:
                    if (!isBlockEntity)
                    {
                        this.arcs.Add((netDxf.Entities.Arc) entity);
                    }
                    goto Label_0C1F;

                case EntityType.AttributeDefinition:
                {
                    AttributeDefinition item = (AttributeDefinition) entity;
                    item.Style = this.textStyles.Add(item.Style, assignHandle);
                    this.textStyles.References[item.Style.Name].Add(item);
                    item.TextStyleChange += new AttributeDefinition.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
                    if (!isBlockEntity)
                    {
                        this.attributeDefinitions.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Circle:
                    if (!isBlockEntity)
                    {
                        this.circles.Add((Circle) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Dimension:
                {
                    Dimension item = (Dimension) entity;
                    item.Style = this.dimStyles.Add(item.Style, assignHandle);
                    this.dimStyles.References[item.Style.Name].Add(item);
                    this.AddDimensionStyleOverrides(item, assignHandle);
                    Block block = item.Block;
                    if (block == null)
                    {
                        int num = this.DimensionBlocksGenerated + 1;
                        this.DimensionBlocksGenerated = num;
                        block = item.BuildBlock("*D" + num);
                    }
                    item.Block = this.blocks.Add(block);
                    this.blocks.References[block.Name].Add(item);
                    item.DimensionStyleChanged += new Dimension.DimensionStyleChangedEventHandler(this.Dimension_DimStyleChanged);
                    item.DimensionBlockChanged += new Dimension.DimensionBlockChangedEventHandler(this.Dimension_DimBlockChanged);
                    item.DimensionStyleOverrideAdded += new Dimension.DimensionStyleOverrideAddedEventHandler(this.Dimension_DimStyleOverrideAdded);
                    item.DimensionStyleOverrideRemoved += new Dimension.DimensionStyleOverrideRemovedEventHandler(this.Dimension_DimStyleOverrideRemoved);
                    if (!isBlockEntity)
                    {
                        this.dimensions.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Ellipse:
                    if (!isBlockEntity)
                    {
                        this.ellipses.Add((netDxf.Entities.Ellipse) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Face3D:
                    if (!isBlockEntity)
                    {
                        this.faces3d.Add((Face3d) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Hatch:
                {
                    Hatch sender = (Hatch) entity;
                    if (!isBlockEntity)
                    {
                        foreach (HatchBoundaryPath path in sender.BoundaryPaths)
                        {
                            this.Hatch_BoundaryPathAdded(sender, new ObservableCollectionEventArgs<HatchBoundaryPath>(path));
                        }
                        sender.HatchBoundaryPathAdded += new Hatch.HatchBoundaryPathAddedEventHandler(this.Hatch_BoundaryPathAdded);
                        sender.HatchBoundaryPathRemoved += new Hatch.HatchBoundaryPathRemovedEventHandler(this.Hatch_BoundaryPathRemoved);
                        this.hatches.Add(sender);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Image:
                {
                    Image item = (Image) entity;
                    item.Definition = this.imageDefs.Add(item.Definition, assignHandle);
                    this.imageDefs.References[item.Definition.Name].Add(item);
                    if (!item.Definition.Reactors.ContainsKey(item.Handle))
                    {
                        ImageDefinitionReactor reactor = new ImageDefinitionReactor(item.Handle);
                        this.NumHandles = reactor.AsignHandle(this.NumHandles);
                        item.Definition.Reactors.Add(item.Handle, reactor);
                    }
                    if (!isBlockEntity)
                    {
                        this.images.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Insert:
                {
                    Insert item = (Insert) entity;
                    item.Block = this.blocks.Add(item.Block, assignHandle);
                    this.blocks.References[item.Block.Name].Add(item);
                    foreach (netDxf.Entities.Attribute attribute in item.Attributes)
                    {
                        attribute.Layer = this.layers.Add(attribute.Layer, assignHandle);
                        this.layers.References[attribute.Layer.Name].Add(attribute);
                        attribute.LayerChanged += new netDxf.Entities.Attribute.LayerChangedEventHandler(this.Entity_LayerChanged);
                        attribute.Linetype = this.linetypes.Add(attribute.Linetype, assignHandle);
                        this.linetypes.References[attribute.Linetype.Name].Add(attribute);
                        attribute.LinetypeChanged += new netDxf.Entities.Attribute.LinetypeChangedEventHandler(this.Entity_LinetypeChanged);
                        attribute.Style = this.textStyles.Add(attribute.Style, assignHandle);
                        this.textStyles.References[attribute.Style.Name].Add(attribute);
                        attribute.TextStyleChanged += new netDxf.Entities.Attribute.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
                    }
                    item.AttributeAdded += new Insert.AttributeAddedEventHandler(this.Insert_AttributeAdded);
                    item.AttributeRemoved += new Insert.AttributeRemovedEventHandler(this.Insert_AttributeRemoved);
                    if (!isBlockEntity)
                    {
                        this.inserts.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Leader:
                {
                    Leader item = (Leader) entity;
                    item.Style = this.dimStyles.Add(item.Style, assignHandle);
                    this.dimStyles.References[item.Style.Name].Add(item);
                    item.LeaderStyleChanged += new Leader.LeaderStyleChangedEventHandler(this.Leader_DimStyleChanged);
                    if (item.Annotation > null)
                    {
                        this.AddEntity(item.Annotation, isBlockEntity, assignHandle);
                    }
                    this.AddStyleOverrides(item, assignHandle);
                    item.DimensionStyleOverrideAdded += new Leader.DimensionStyleOverrideAddedEventHandler(this.Leader_DimStyleOverrideAdded);
                    item.DimensionStyleOverrideRemoved += new Leader.DimensionStyleOverrideRemovedEventHandler(this.Leader_DimStyleOverrideRemoved);
                    if (!isBlockEntity)
                    {
                        this.leaders.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.LightWeightPolyline:
                    if (!isBlockEntity)
                    {
                        this.lwPolylines.Add((LwPolyline) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Line:
                    if (!isBlockEntity)
                    {
                        this.lines.Add((netDxf.Entities.Line) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Mesh:
                    if (!isBlockEntity)
                    {
                        this.meshes.Add((Mesh) entity);
                    }
                    goto Label_0C1F;

                case EntityType.MLine:
                {
                    MLine item = (MLine) entity;
                    item.Style = this.mlineStyles.Add(item.Style, assignHandle);
                    this.mlineStyles.References[item.Style.Name].Add(item);
                    item.MLineStyleChanged += new MLine.MLineStyleChangedEventHandler(this.MLine_MLineStyleChanged);
                    if (!isBlockEntity)
                    {
                        this.mLines.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.MText:
                {
                    MText item = (MText) entity;
                    item.Style = this.textStyles.Add(item.Style, assignHandle);
                    this.textStyles.References[item.Style.Name].Add(item);
                    item.TextStyleChanged += new MText.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
                    if (!isBlockEntity)
                    {
                        this.mTexts.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Point:
                    if (!isBlockEntity)
                    {
                        this.points.Add((Point) entity);
                    }
                    goto Label_0C1F;

                case EntityType.PolyfaceMesh:
                    if (!isBlockEntity)
                    {
                        this.polyfaceMeshes.Add((PolyfaceMesh) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Polyline:
                    if (!isBlockEntity)
                    {
                        this.polylines.Add((netDxf.Entities.Polyline) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Ray:
                    if (!isBlockEntity)
                    {
                        this.rays.Add((Ray) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Solid:
                    if (!isBlockEntity)
                    {
                        this.solids.Add((Solid) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Spline:
                    if (!isBlockEntity)
                    {
                        this.splines.Add((netDxf.Entities.Spline) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Text:
                {
                    Text item = (Text) entity;
                    item.Style = this.textStyles.Add(item.Style, assignHandle);
                    this.textStyles.References[item.Style.Name].Add(item);
                    item.TextStyleChanged += new Text.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
                    if (!isBlockEntity)
                    {
                        this.texts.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Tolerance:
                {
                    Tolerance item = (Tolerance) entity;
                    item.Style = this.dimStyles.Add(item.Style, assignHandle);
                    this.dimStyles.References[item.Style.Name].Add(item);
                    item.ToleranceStyleChanged += new Tolerance.ToleranceStyleChangedEventHandler(this.Tolerance_DimStyleChanged);
                    if (!isBlockEntity)
                    {
                        this.tolerances.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Trace:
                    if (!isBlockEntity)
                    {
                        this.traces.Add((Trace) entity);
                    }
                    goto Label_0C1F;

                case EntityType.Underlay:
                    underlay = (Underlay) entity;
                    switch (underlay.Definition.Type)
                    {
                        case UnderlayType.DGN:
                            underlay.Definition = this.underlayDgnDefs.Add((UnderlayDgnDefinition) underlay.Definition, assignHandle);
                            this.underlayDgnDefs.References[underlay.Definition.Name].Add(underlay);
                            goto Label_0B07;

                        case UnderlayType.DWF:
                            underlay.Definition = this.underlayDwfDefs.Add((UnderlayDwfDefinition) underlay.Definition, assignHandle);
                            this.underlayDwfDefs.References[underlay.Definition.Name].Add(underlay);
                            goto Label_0B07;

                        case UnderlayType.PDF:
                            underlay.Definition = this.underlayPdfDefs.Add((UnderlayPdfDefinition) underlay.Definition, assignHandle);
                            this.underlayPdfDefs.References[underlay.Definition.Name].Add(underlay);
                            goto Label_0B07;
                    }
                    break;

                case EntityType.Viewport:
                {
                    netDxf.Entities.Viewport item = (netDxf.Entities.Viewport) entity;
                    if (item.ClippingBoundary > null)
                    {
                        this.AddEntity(item.ClippingBoundary, isBlockEntity, assignHandle);
                    }
                    if (!isBlockEntity)
                    {
                        this.viewports.Add(item);
                    }
                    goto Label_0C1F;
                }
                case EntityType.Wipeout:
                    if (!isBlockEntity)
                    {
                        this.wipeouts.Add((Wipeout) entity);
                    }
                    goto Label_0C1F;

                case EntityType.XLine:
                    if (!isBlockEntity)
                    {
                        this.xlines.Add((XLine) entity);
                    }
                    goto Label_0C1F;

                default:
                    throw new ArgumentException("The entity " + entity.Type + " is not implemented or unknown.");
            }
        Label_0B07:
            if (!isBlockEntity)
            {
                this.underlays.Add(underlay);
            }
        Label_0C1F:
            foreach (string str in entity.XData.AppIds)
            {
                entity.XData[str].ApplicationRegistry = this.appRegistries.Add(entity.XData[str].ApplicationRegistry, assignHandle);
                this.appRegistries.References[str].Add(entity);
            }
            entity.Layer = this.layers.Add(entity.Layer, assignHandle);
            this.layers.References[entity.Layer.Name].Add(entity);
            entity.Linetype = this.linetypes.Add(entity.Linetype, assignHandle);
            this.linetypes.References[entity.Linetype.Name].Add(entity);
            this.AddedObjects.Add(entity.Handle, entity);
            entity.LayerChanged += new EntityObject.LayerChangedEventHandler(this.Entity_LayerChanged);
            entity.LinetypeChanged += new EntityObject.LinetypeChangedEventHandler(this.Entity_LinetypeChanged);
            entity.XDataAddAppReg += new EntityObject.XDataAddAppRegEventHandler(this.Entity_XDataAddAppReg);
            entity.XDataRemoveAppReg += new EntityObject.XDataRemoveAppRegEventHandler(this.Entity_XDataRemoveAppReg);
        }

        private void AddStyleOverrides(EntityObject entity, bool assignHandle)
        {
            DimensionStyleOverrideDictionary styleOverrides;
            switch (entity.Type)
            {
                case EntityType.Dimension:
                    styleOverrides = ((Dimension) entity).StyleOverrides;
                    break;

                case EntityType.Leader:
                    styleOverrides = ((Leader) entity).StyleOverrides;
                    break;

                default:
                    return;
            }
            styleOverrides.TryGetValue(DimensionStyleOverrideType.TextStyle, out DimensionStyleOverride @override);
            if (@override > null)
            {
                TextStyle item = (TextStyle) @override.Value;
                styleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.textStyles.Add(item, assignHandle));
                this.textStyles.References[item.Name].Add(entity);
            }
            styleOverrides.TryGetValue(DimensionStyleOverrideType.LeaderArrow, out @override);
            if (@override > null)
            {
                Block item = (Block) @override.Value;
                if (item > null)
                {
                    styleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.blocks.Add(item, assignHandle));
                    this.blocks.References[item.Name].Add(entity);
                }
            }
            styleOverrides.TryGetValue(DimensionStyleOverrideType.DimArrow1, out @override);
            if (@override > null)
            {
                Block item = (Block) @override.Value;
                if (item > null)
                {
                    styleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.blocks.Add(item, assignHandle));
                    this.blocks.References[item.Name].Add(entity);
                }
            }
            styleOverrides.TryGetValue(DimensionStyleOverrideType.DimArrow2, out @override);
            if (@override > null)
            {
                Block item = (Block) @override.Value;
                if (item > null)
                {
                    styleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.blocks.Add(item, assignHandle));
                    this.blocks.References[item.Name].Add(entity);
                }
            }
            styleOverrides.TryGetValue(DimensionStyleOverrideType.DimLineLinetype, out @override);
            if (@override > null)
            {
                Linetype item = (Linetype) @override.Value;
                styleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.linetypes.Add(item, assignHandle));
                this.linetypes.References[item.Name].Add(entity);
            }
            styleOverrides.TryGetValue(DimensionStyleOverrideType.ExtLine1Linetype, out @override);
            if (@override > null)
            {
                Linetype item = (Linetype) @override.Value;
                styleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.linetypes.Add(item, assignHandle));
                this.linetypes.References[item.Name].Add(entity);
            }
            styleOverrides.TryGetValue(DimensionStyleOverrideType.ExtLine2Linetype, out @override);
            if (@override > null)
            {
                Linetype item = (Linetype) @override.Value;
                styleOverrides[@override.Type] = new DimensionStyleOverride(@override.Type, this.linetypes.Add(item, assignHandle));
                this.linetypes.References[item.Name].Add(entity);
            }
        }

        public static DxfVersion CheckDxfFileVersion(Stream stream, out bool isBinary)
        {
            string str = DxfReader.CheckHeaderVariable(stream, "$ACADVER", out isBinary);
            return (DxfVersion) StringEnum.Parse(typeof(DxfVersion), str);
        }

        public static DxfVersion CheckDxfFileVersion(string file, out bool isBinary)
        {
            string str;
            Stream stream = File.Open(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            isBinary = false;
            try
            {
                str = DxfReader.CheckHeaderVariable(stream, "$ACADVER", out isBinary);
            }
            catch
            {
                return DxfVersion.Unknown;
            }
            finally
            {
                stream.Close();
            }
            if (string.IsNullOrEmpty(str))
            {
                return DxfVersion.Unknown;
            }
            return (DxfVersion) StringEnum.Parse(typeof(DxfVersion), str);
        }

        private void Dimension_DimBlockChanged(Dimension sender, TableObjectChangedEventArgs<Block> e)
        {
            this.blocks.References[e.OldValue.Name].Remove(sender);
            this.blocks.Remove(e.OldValue);
            e.NewValue = this.blocks.Add(e.NewValue);
            this.blocks.References[e.NewValue.Name].Add(sender);
        }

        private void Dimension_DimStyleChanged(Dimension sender, TableObjectChangedEventArgs<DimensionStyle> e)
        {
            this.dimStyles.References[e.OldValue.Name].Remove(sender);
            e.NewValue = this.dimStyles.Add(e.NewValue);
            this.dimStyles.References[e.NewValue.Name].Add(sender);
        }

        private void Dimension_DimStyleOverrideAdded(Dimension sender, DimensionStyleOverrideChangeEventArgs e)
        {
            switch (e.Item.Type)
            {
                case DimensionStyleOverrideType.LeaderArrow:
                case DimensionStyleOverrideType.DimArrow1:
                case DimensionStyleOverrideType.DimArrow2:
                {
                    Block item = (Block) e.Item.Value;
                    if (item != null)
                    {
                        sender.StyleOverrides[e.Item.Type] = new DimensionStyleOverride(e.Item.Type, this.blocks.Add(item));
                        this.blocks.References[item.Name].Add(sender);
                        break;
                    }
                    break;
                }
                case DimensionStyleOverrideType.TextStyle:
                {
                    TextStyle item = (TextStyle) e.Item.Value;
                    sender.StyleOverrides[e.Item.Type] = new DimensionStyleOverride(e.Item.Type, this.textStyles.Add(item));
                    this.textStyles.References[item.Name].Add(sender);
                    break;
                }
                case DimensionStyleOverrideType.ExtLine2Linetype:
                case DimensionStyleOverrideType.DimLineLinetype:
                case DimensionStyleOverrideType.ExtLine1Linetype:
                {
                    Linetype item = (Linetype) e.Item.Value;
                    sender.StyleOverrides[e.Item.Type] = new DimensionStyleOverride(e.Item.Type, this.linetypes.Add(item));
                    this.linetypes.References[item.Name].Add(sender);
                    break;
                }
            }
        }

        private void Dimension_DimStyleOverrideRemoved(Dimension sender, DimensionStyleOverrideChangeEventArgs e)
        {
            switch (e.Item.Type)
            {
                case DimensionStyleOverrideType.LeaderArrow:
                case DimensionStyleOverrideType.DimArrow1:
                case DimensionStyleOverrideType.DimArrow2:
                {
                    Block block = (Block) e.Item.Value;
                    if (block != null)
                    {
                        this.blocks.References[block.Name].Remove(sender);
                    }
                    break;
                }
                case DimensionStyleOverrideType.TextStyle:
                {
                    TextStyle style = (TextStyle) e.Item.Value;
                    this.textStyles.References[style.Name].Remove(sender);
                    break;
                }
                case DimensionStyleOverrideType.ExtLine2Linetype:
                case DimensionStyleOverrideType.DimLineLinetype:
                case DimensionStyleOverrideType.ExtLine1Linetype:
                {
                    Linetype linetype = (Linetype) e.Item.Value;
                    this.linetypes.References[linetype.Name].Remove(sender);
                    break;
                }
            }
        }

        private void Entity_LayerChanged(DxfObject sender, TableObjectChangedEventArgs<Layer> e)
        {
            this.layers.References[e.OldValue.Name].Remove(sender);
            e.NewValue = this.layers.Add(e.NewValue);
            this.layers.References[e.NewValue.Name].Add(sender);
        }

        private void Entity_LinetypeChanged(DxfObject sender, TableObjectChangedEventArgs<Linetype> e)
        {
            this.linetypes.References[e.OldValue.Name].Remove(sender);
            e.NewValue = this.linetypes.Add(e.NewValue);
            this.linetypes.References[e.NewValue.Name].Add(sender);
        }

        private void Entity_TextStyleChanged(DxfObject sender, TableObjectChangedEventArgs<TextStyle> e)
        {
            this.textStyles.References[e.OldValue.Name].Remove(sender);
            e.NewValue = this.textStyles.Add(e.NewValue);
            this.textStyles.References[e.NewValue.Name].Add(sender);
        }

        private void Entity_XDataAddAppReg(EntityObject sender, ObservableCollectionEventArgs<ApplicationRegistry> e)
        {
            sender.XData[e.Item.Name].ApplicationRegistry = this.appRegistries.Add(sender.XData[e.Item.Name].ApplicationRegistry);
            this.appRegistries.References[e.Item.Name].Add(sender);
        }

        private void Entity_XDataRemoveAppReg(EntityObject sender, ObservableCollectionEventArgs<ApplicationRegistry> e)
        {
            this.appRegistries.References[e.Item.Name].Remove(sender);
        }

        public DxfObject GetObjectByHandle(string objectHandle)
        {
            if (string.IsNullOrEmpty(objectHandle))
            {
                return null;
            }
            this.AddedObjects.TryGetValue(objectHandle, out DxfObject obj2);
            return obj2;
        }

        private void Hatch_BoundaryPathAdded(Hatch sender, ObservableCollectionEventArgs<HatchBoundaryPath> e)
        {
            Layout layout = sender.Owner.Record.Layout;
            foreach (EntityObject obj2 in e.Item.Entities)
            {
                if (obj2.Owner > null)
                {
                    if (obj2.Owner.Record.Layout != layout)
                    {
                        throw new ArgumentException("The HatchBoundaryPath entity and the hatch must belong to the same layout and document. Clone it instead.");
                    }
                }
                else
                {
                    string activeLayout = this.ActiveLayout;
                    this.ActiveLayout = layout.Name;
                    this.AddEntity(obj2, false, true);
                    this.ActiveLayout = activeLayout;
                }
            }
        }

        private void Hatch_BoundaryPathRemoved(Hatch sender, ObservableCollectionEventArgs<HatchBoundaryPath> e)
        {
            foreach (EntityObject obj2 in e.Item.Entities)
            {
                this.RemoveEntity(obj2);
            }
        }

        private void Insert_AttributeAdded(Insert sender, AttributeChangeEventArgs e)
        {
            this.NumHandles = e.Item.AsignHandle(this.NumHandles);
            e.Item.Layer = this.layers.Add(e.Item.Layer);
            this.layers.References[e.Item.Layer.Name].Add(e.Item);
            e.Item.LayerChanged += new netDxf.Entities.Attribute.LayerChangedEventHandler(this.Entity_LayerChanged);
            e.Item.Linetype = this.linetypes.Add(e.Item.Linetype);
            this.linetypes.References[e.Item.Linetype.Name].Add(e.Item);
            e.Item.LinetypeChanged -= new netDxf.Entities.Attribute.LinetypeChangedEventHandler(this.Entity_LinetypeChanged);
            e.Item.Style = this.textStyles.Add(e.Item.Style);
            this.textStyles.References[e.Item.Style.Name].Add(e.Item);
            e.Item.TextStyleChanged += new netDxf.Entities.Attribute.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
        }

        private void Insert_AttributeRemoved(Insert sender, AttributeChangeEventArgs e)
        {
            this.layers.References[e.Item.Layer.Name].Remove(e.Item);
            e.Item.LayerChanged += new netDxf.Entities.Attribute.LayerChangedEventHandler(this.Entity_LayerChanged);
            this.linetypes.References[e.Item.Linetype.Name].Remove(e.Item);
            e.Item.LinetypeChanged -= new netDxf.Entities.Attribute.LinetypeChangedEventHandler(this.Entity_LinetypeChanged);
            this.textStyles.References[e.Item.Style.Name].Remove(e.Item);
            e.Item.TextStyleChanged += new netDxf.Entities.Attribute.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
        }

        private void Leader_DimStyleChanged(Leader sender, TableObjectChangedEventArgs<DimensionStyle> e)
        {
            this.dimStyles.References[e.OldValue.Name].Remove(sender);
            e.NewValue = this.dimStyles.Add(e.NewValue);
            this.dimStyles.References[e.NewValue.Name].Add(sender);
        }

        private void Leader_DimStyleOverrideAdded(Leader sender, DimensionStyleOverrideChangeEventArgs e)
        {
            switch (e.Item.Type)
            {
                case DimensionStyleOverrideType.LeaderArrow:
                case DimensionStyleOverrideType.DimArrow1:
                case DimensionStyleOverrideType.DimArrow2:
                {
                    Block item = (Block) e.Item.Value;
                    if (item != null)
                    {
                        sender.StyleOverrides[e.Item.Type] = new DimensionStyleOverride(e.Item.Type, this.blocks.Add(item));
                        this.blocks.References[item.Name].Add(sender);
                        break;
                    }
                    break;
                }
                case DimensionStyleOverrideType.TextStyle:
                {
                    TextStyle item = (TextStyle) e.Item.Value;
                    sender.StyleOverrides[e.Item.Type] = new DimensionStyleOverride(e.Item.Type, this.textStyles.Add(item));
                    this.textStyles.References[item.Name].Add(sender);
                    break;
                }
                case DimensionStyleOverrideType.ExtLine2Linetype:
                case DimensionStyleOverrideType.DimLineLinetype:
                case DimensionStyleOverrideType.ExtLine1Linetype:
                {
                    Linetype item = (Linetype) e.Item.Value;
                    sender.StyleOverrides[e.Item.Type] = new DimensionStyleOverride(e.Item.Type, this.linetypes.Add(item));
                    this.linetypes.References[item.Name].Add(sender);
                    break;
                }
            }
        }

        private void Leader_DimStyleOverrideRemoved(Leader sender, DimensionStyleOverrideChangeEventArgs e)
        {
            switch (e.Item.Type)
            {
                case DimensionStyleOverrideType.LeaderArrow:
                case DimensionStyleOverrideType.DimArrow1:
                case DimensionStyleOverrideType.DimArrow2:
                {
                    Block block = (Block) e.Item.Value;
                    if (block != null)
                    {
                        this.blocks.References[block.Name].Remove(sender);
                    }
                    break;
                }
                case DimensionStyleOverrideType.TextStyle:
                {
                    TextStyle style = (TextStyle) e.Item.Value;
                    this.textStyles.References[style.Name].Remove(sender);
                    break;
                }
                case DimensionStyleOverrideType.ExtLine2Linetype:
                case DimensionStyleOverrideType.DimLineLinetype:
                case DimensionStyleOverrideType.ExtLine1Linetype:
                {
                    Linetype linetype = (Linetype) e.Item.Value;
                    this.linetypes.References[linetype.Name].Remove(sender);
                    break;
                }
            }
        }

        public static DxfDocument Load(Stream stream)
        {
            DxfReader reader = new DxfReader();
            return reader.Read(stream);
        }

        public static DxfDocument Load(string file)
        {
            Stream stream;
            FileInfo info = new FileInfo(file);
            if (!info.Exists)
            {
                throw new FileNotFoundException($"File {info.FullName} not found.", info.FullName);
            }
            try
            {
                stream = File.Open(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            }
            catch (Exception exception)
            {
                throw new IOException($"Error trying to open the file {info.FullName} for reading.", exception);
            }
            DxfDocument document = new DxfReader().Read(stream);
            stream.Close();
            document.name = Path.GetFileNameWithoutExtension(info.FullName);
            return document;
        }

        private void MLine_MLineStyleChanged(MLine sender, TableObjectChangedEventArgs<MLineStyle> e)
        {
            this.mlineStyles.References[e.OldValue.Name].Remove(sender);
            e.NewValue = this.mlineStyles.Add(e.NewValue);
            this.mlineStyles.References[e.NewValue.Name].Add(sender);
        }

        private void RemoveDimensionStyleOverrides(DimensionStyleOverrideDictionary overrides, DxfObject entity)
        {
            overrides.TryGetValue(DimensionStyleOverrideType.TextStyle, out DimensionStyleOverride @override);
            if (@override > null)
            {
                TextStyle style = (TextStyle) @override.Value;
                this.textStyles.References[style.Name].Remove(entity);
            }
            overrides.TryGetValue(DimensionStyleOverrideType.LeaderArrow, out @override);
            if (@override > null)
            {
                Block block = (Block) @override.Value;
                if (block > null)
                {
                    this.blocks.References[block.Name].Remove(entity);
                }
            }
            overrides.TryGetValue(DimensionStyleOverrideType.DimArrow1, out @override);
            if (@override > null)
            {
                Block block2 = (Block) @override.Value;
                if (block2 > null)
                {
                    this.blocks.References[block2.Name].Remove(entity);
                }
            }
            overrides.TryGetValue(DimensionStyleOverrideType.DimArrow2, out @override);
            if (@override > null)
            {
                Block block3 = (Block) @override.Value;
                if (block3 > null)
                {
                    this.blocks.References[block3.Name].Remove(entity);
                }
            }
            overrides.TryGetValue(DimensionStyleOverrideType.DimLineLinetype, out @override);
            if (@override > null)
            {
                Linetype linetype = (Linetype) @override.Value;
                this.linetypes.References[linetype.Name].Remove(entity);
            }
            overrides.TryGetValue(DimensionStyleOverrideType.ExtLine1Linetype, out @override);
            if (@override > null)
            {
                Linetype linetype2 = (Linetype) @override.Value;
                this.linetypes.References[linetype2.Name].Remove(entity);
            }
            overrides.TryGetValue(DimensionStyleOverrideType.ExtLine2Linetype, out @override);
            if (@override > null)
            {
                Linetype linetype3 = (Linetype) @override.Value;
                this.linetypes.References[linetype3.Name].Remove(entity);
            }
        }

        public bool RemoveEntity(EntityObject entity) => 
            this.RemoveEntity(entity, false);

        public void RemoveEntity(IEnumerable<EntityObject> entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException("entities");
            }
            foreach (EntityObject obj2 in entities)
            {
                this.RemoveEntity(obj2, false);
            }
        }

        internal bool RemoveEntity(EntityObject entity, bool isBlockEntity)
        {
            if (entity == null)
            {
                return false;
            }
            if (entity.Handle == null)
            {
                return false;
            }
            if (entity.Owner == null)
            {
                return false;
            }
            if (entity.Reactors.Count > 0)
            {
                return false;
            }
            if (entity.Owner.Record.Layout == null)
            {
                return false;
            }
            if (!this.AddedObjects.ContainsKey(entity.Handle))
            {
                return false;
            }
            switch (entity.Type)
            {
                case EntityType.Arc:
                    if (!isBlockEntity)
                    {
                        this.arcs.Remove((netDxf.Entities.Arc) entity);
                    }
                    break;

                case EntityType.AttributeDefinition:
                {
                    AttributeDefinition item = (AttributeDefinition) entity;
                    if (!isBlockEntity)
                    {
                        this.attributeDefinitions.Remove(item);
                    }
                    this.textStyles.References[item.Style.Name].Remove(entity);
                    break;
                }
                case EntityType.Circle:
                    if (!isBlockEntity)
                    {
                        this.circles.Remove((Circle) entity);
                    }
                    break;

                case EntityType.Dimension:
                {
                    Dimension item = (Dimension) entity;
                    if (!isBlockEntity)
                    {
                        this.dimensions.Remove(item);
                    }
                    this.blocks.References[item.Block.Name].Remove(entity);
                    item.DimensionBlockChanged -= new Dimension.DimensionBlockChangedEventHandler(this.Dimension_DimBlockChanged);
                    this.dimStyles.References[item.Style.Name].Remove(entity);
                    item.DimensionStyleChanged -= new Dimension.DimensionStyleChangedEventHandler(this.Dimension_DimStyleChanged);
                    item.Block = null;
                    this.RemoveDimensionStyleOverrides(item.StyleOverrides, item);
                    item.DimensionStyleOverrideAdded -= new Dimension.DimensionStyleOverrideAddedEventHandler(this.Dimension_DimStyleOverrideAdded);
                    item.DimensionStyleOverrideRemoved -= new Dimension.DimensionStyleOverrideRemovedEventHandler(this.Dimension_DimStyleOverrideRemoved);
                    break;
                }
                case EntityType.Ellipse:
                    if (!isBlockEntity)
                    {
                        this.ellipses.Remove((netDxf.Entities.Ellipse) entity);
                    }
                    break;

                case EntityType.Face3D:
                    if (!isBlockEntity)
                    {
                        this.faces3d.Remove((Face3d) entity);
                    }
                    break;

                case EntityType.Hatch:
                {
                    Hatch item = (Hatch) entity;
                    item.UnLinkBoundary();
                    if (!isBlockEntity)
                    {
                        item.HatchBoundaryPathAdded -= new Hatch.HatchBoundaryPathAddedEventHandler(this.Hatch_BoundaryPathAdded);
                        item.HatchBoundaryPathRemoved -= new Hatch.HatchBoundaryPathRemovedEventHandler(this.Hatch_BoundaryPathRemoved);
                        this.hatches.Remove(item);
                    }
                    break;
                }
                case EntityType.Image:
                {
                    Image item = (Image) entity;
                    if (!isBlockEntity)
                    {
                        this.images.Remove(item);
                    }
                    this.imageDefs.References[item.Definition.Name].Remove(item);
                    item.Definition.Reactors.Remove(item.Handle);
                    break;
                }
                case EntityType.Insert:
                {
                    Insert item = (Insert) entity;
                    if (!isBlockEntity)
                    {
                        this.inserts.Remove(item);
                    }
                    this.blocks.References[item.Block.Name].Remove(entity);
                    foreach (netDxf.Entities.Attribute attribute in item.Attributes)
                    {
                        this.layers.References[attribute.Layer.Name].Remove(attribute);
                        attribute.LayerChanged -= new netDxf.Entities.Attribute.LayerChangedEventHandler(this.Entity_LayerChanged);
                        this.linetypes.References[attribute.Linetype.Name].Remove(attribute);
                        attribute.LinetypeChanged -= new netDxf.Entities.Attribute.LinetypeChangedEventHandler(this.Entity_LinetypeChanged);
                        this.textStyles.References[attribute.Style.Name].Remove(attribute);
                        attribute.TextStyleChanged -= new netDxf.Entities.Attribute.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
                    }
                    item.AttributeAdded -= new Insert.AttributeAddedEventHandler(this.Insert_AttributeAdded);
                    item.AttributeRemoved -= new Insert.AttributeRemovedEventHandler(this.Insert_AttributeRemoved);
                    break;
                }
                case EntityType.Leader:
                {
                    Leader item = (Leader) entity;
                    if (!isBlockEntity)
                    {
                        this.leaders.Remove(item);
                    }
                    this.dimStyles.References[item.Style.Name].Remove(entity);
                    item.LeaderStyleChanged -= new Leader.LeaderStyleChangedEventHandler(this.Leader_DimStyleChanged);
                    if (item.Annotation > null)
                    {
                        item.Annotation.RemoveReactor(item);
                    }
                    this.RemoveDimensionStyleOverrides(item.StyleOverrides, item);
                    item.DimensionStyleOverrideAdded -= new Leader.DimensionStyleOverrideAddedEventHandler(this.Leader_DimStyleOverrideAdded);
                    item.DimensionStyleOverrideRemoved -= new Leader.DimensionStyleOverrideRemovedEventHandler(this.Leader_DimStyleOverrideRemoved);
                    break;
                }
                case EntityType.LightWeightPolyline:
                    if (!isBlockEntity)
                    {
                        this.lwPolylines.Remove((LwPolyline) entity);
                    }
                    break;

                case EntityType.Line:
                    if (!isBlockEntity)
                    {
                        this.lines.Remove((netDxf.Entities.Line) entity);
                    }
                    break;

                case EntityType.Mesh:
                    if (!isBlockEntity)
                    {
                        this.meshes.Remove((Mesh) entity);
                    }
                    break;

                case EntityType.MLine:
                {
                    MLine item = (MLine) entity;
                    if (!isBlockEntity)
                    {
                        this.mLines.Remove(item);
                    }
                    this.mlineStyles.References[item.Style.Name].Remove(entity);
                    item.MLineStyleChanged -= new MLine.MLineStyleChangedEventHandler(this.MLine_MLineStyleChanged);
                    break;
                }
                case EntityType.MText:
                {
                    MText item = (MText) entity;
                    if (!isBlockEntity)
                    {
                        this.mTexts.Remove(item);
                    }
                    this.textStyles.References[item.Style.Name].Remove(entity);
                    item.TextStyleChanged -= new MText.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
                    break;
                }
                case EntityType.Point:
                    if (!isBlockEntity)
                    {
                        this.points.Remove((Point) entity);
                    }
                    break;

                case EntityType.PolyfaceMesh:
                    if (!isBlockEntity)
                    {
                        this.polyfaceMeshes.Remove((PolyfaceMesh) entity);
                    }
                    break;

                case EntityType.Polyline:
                    if (!isBlockEntity)
                    {
                        this.polylines.Remove((netDxf.Entities.Polyline) entity);
                    }
                    break;

                case EntityType.Ray:
                    if (!isBlockEntity)
                    {
                        this.rays.Remove((Ray) entity);
                    }
                    break;

                case EntityType.Solid:
                    if (!isBlockEntity)
                    {
                        this.solids.Remove((Solid) entity);
                    }
                    break;

                case EntityType.Spline:
                    if (!isBlockEntity)
                    {
                        this.splines.Remove((netDxf.Entities.Spline) entity);
                    }
                    break;

                case EntityType.Text:
                {
                    Text item = (Text) entity;
                    if (!isBlockEntity)
                    {
                        this.texts.Remove(item);
                    }
                    this.textStyles.References[item.Style.Name].Remove(entity);
                    item.TextStyleChanged -= new Text.TextStyleChangedEventHandler(this.Entity_TextStyleChanged);
                    break;
                }
                case EntityType.Tolerance:
                {
                    Tolerance item = (Tolerance) entity;
                    if (!isBlockEntity)
                    {
                        this.tolerances.Remove(item);
                    }
                    this.dimStyles.References[item.Style.Name].Remove(entity);
                    item.ToleranceStyleChanged -= new Tolerance.ToleranceStyleChangedEventHandler(this.Tolerance_DimStyleChanged);
                    break;
                }
                case EntityType.Trace:
                    if (!isBlockEntity)
                    {
                        this.traces.Remove((Trace) entity);
                    }
                    break;

                case EntityType.Viewport:
                {
                    netDxf.Entities.Viewport item = (netDxf.Entities.Viewport) entity;
                    if (!isBlockEntity)
                    {
                        this.viewports.Remove(item);
                    }
                    if (item.ClippingBoundary > null)
                    {
                        item.ClippingBoundary.RemoveReactor(item);
                        this.RemoveEntity(item.ClippingBoundary);
                    }
                    break;
                }
                case EntityType.XLine:
                    if (!isBlockEntity)
                    {
                        this.xlines.Remove((XLine) entity);
                    }
                    break;

                default:
                    throw new ArgumentException("The entity " + entity.Type + " is not implemented or unknown");
            }
            if (!isBlockEntity)
            {
                this.layouts.References[entity.Owner.Record.Layout.Name].Remove(entity);
            }
            this.layers.References[entity.Layer.Name].Remove(entity);
            this.linetypes.References[entity.Linetype.Name].Remove(entity);
            foreach (string str in entity.XData.AppIds)
            {
                this.appRegistries.References[str].Remove(entity);
            }
            this.AddedObjects.Remove(entity.Handle);
            entity.Handle = null;
            entity.Owner = null;
            entity.LayerChanged -= new EntityObject.LayerChangedEventHandler(this.Entity_LayerChanged);
            entity.LinetypeChanged -= new EntityObject.LinetypeChangedEventHandler(this.Entity_LinetypeChanged);
            entity.XDataAddAppReg -= new EntityObject.XDataAddAppRegEventHandler(this.Entity_XDataAddAppReg);
            entity.XDataRemoveAppReg -= new EntityObject.XDataRemoveAppRegEventHandler(this.Entity_XDataRemoveAppReg);
            return true;
        }

        public bool Save(Stream stream) => 
            this.Save(stream, false);

        public bool Save(string file) => 
            this.Save(file, false);

        public bool Save(Stream stream, bool isBinary)
        {
            new DxfWriter().Write(stream, this, isBinary);
            return true;
        }

        public bool Save(string file, bool isBinary)
        {
            FileInfo info = new FileInfo(file);
            this.name = Path.GetFileNameWithoutExtension(info.FullName);
            DxfWriter writer = new DxfWriter();
            Stream stream = File.Create(file);
            writer.Write(stream, this, isBinary);
            stream.Close();
            return true;
        }

        private void Tolerance_DimStyleChanged(Tolerance sender, TableObjectChangedEventArgs<DimensionStyle> e)
        {
            this.dimStyles.References[e.OldValue.Name].Remove(sender);
            e.NewValue = this.dimStyles.Add(e.NewValue);
            this.dimStyles.References[e.NewValue.Name].Add(sender);
        }

        public List<string> Comments =>
            this.comments;

        public HeaderVariables DrawingVariables =>
            this.drawingVariables;

        public string Name
        {
            get => 
                this.name;
            set => 
                (this.name = value);
        }

        public netDxf.Collections.ApplicationRegistries ApplicationRegistries
        {
            get => 
                this.appRegistries;
            internal set => 
                (this.appRegistries = value);
        }

        public netDxf.Collections.Layers Layers
        {
            get => 
                this.layers;
            internal set => 
                (this.layers = value);
        }

        public netDxf.Collections.Linetypes Linetypes
        {
            get => 
                this.linetypes;
            internal set => 
                (this.linetypes = value);
        }

        public netDxf.Collections.TextStyles TextStyles
        {
            get => 
                this.textStyles;
            internal set => 
                (this.textStyles = value);
        }

        public netDxf.Collections.DimensionStyles DimensionStyles
        {
            get => 
                this.dimStyles;
            internal set => 
                (this.dimStyles = value);
        }

        public MLineStyles MlineStyles
        {
            get => 
                this.mlineStyles;
            internal set => 
                (this.mlineStyles = value);
        }

        public netDxf.Collections.UCSs UCSs
        {
            get => 
                this.ucss;
            internal set => 
                (this.ucss = value);
        }

        public BlockRecords Blocks
        {
            get => 
                this.blocks;
            internal set => 
                (this.blocks = value);
        }

        public netDxf.Collections.ImageDefinitions ImageDefinitions
        {
            get => 
                this.imageDefs;
            internal set => 
                (this.imageDefs = value);
        }

        public netDxf.Collections.UnderlayDgnDefinitions UnderlayDgnDefinitions
        {
            get => 
                this.underlayDgnDefs;
            internal set => 
                (this.underlayDgnDefs = value);
        }

        public netDxf.Collections.UnderlayDwfDefinitions UnderlayDwfDefinitions
        {
            get => 
                this.underlayDwfDefs;
            internal set => 
                (this.underlayDwfDefs = value);
        }

        public netDxf.Collections.UnderlayPdfDefinitions UnderlayPdfDefinitions
        {
            get => 
                this.underlayPdfDefs;
            internal set => 
                (this.underlayPdfDefs = value);
        }

        public netDxf.Collections.Groups Groups
        {
            get => 
                this.groups;
            internal set => 
                (this.groups = value);
        }

        public netDxf.Collections.Layouts Layouts
        {
            get => 
                this.layouts;
            internal set => 
                (this.layouts = value);
        }

        public netDxf.Collections.VPorts VPorts
        {
            get => 
                this.vports;
            internal set => 
                (this.vports = value);
        }

        internal netDxf.Collections.Views Views
        {
            get => 
                this.views;
            set => 
                (this.views = value);
        }

        public IReadOnlyList<netDxf.Entities.Arc> Arcs =>
            this.arcs;

        public IReadOnlyList<AttributeDefinition> AttributeDefinitions =>
            this.attributeDefinitions;

        public IReadOnlyList<netDxf.Entities.Ellipse> Ellipses =>
            this.ellipses;

        public IReadOnlyList<Circle> Circles =>
            this.circles;

        public IReadOnlyList<Face3d> Faces3d =>
            this.faces3d;

        public IReadOnlyList<Solid> Solids =>
            this.solids;

        public IReadOnlyList<Trace> Traces =>
            this.traces;

        public IReadOnlyList<Insert> Inserts =>
            this.inserts;

        public IReadOnlyList<netDxf.Entities.Line> Lines =>
            this.lines;

        public IReadOnlyList<netDxf.Entities.Polyline> Polylines =>
            this.polylines;

        public IReadOnlyList<LwPolyline> LwPolylines =>
            this.lwPolylines;

        public IReadOnlyList<PolyfaceMesh> PolyfaceMeshes =>
            this.polyfaceMeshes;

        public IReadOnlyList<Point> Points =>
            this.points;

        public IReadOnlyList<Text> Texts =>
            this.texts;

        public IReadOnlyList<MText> MTexts =>
            this.mTexts;

        public IReadOnlyList<Hatch> Hatches =>
            this.hatches;

        public IReadOnlyList<Image> Images =>
            this.images;

        public IReadOnlyList<Mesh> Meshes =>
            this.meshes;

        public IReadOnlyList<Leader> Leaders =>
            this.leaders;

        public IReadOnlyList<Tolerance> Tolerances =>
            this.tolerances;

        public IReadOnlyList<Underlay> Underlays =>
            this.underlays;

        public IReadOnlyList<MLine> MLines =>
            this.mLines;

        public IReadOnlyList<Dimension> Dimensions =>
            this.dimensions;

        public IReadOnlyList<netDxf.Entities.Spline> Splines =>
            this.splines;

        public IReadOnlyList<Ray> Rays =>
            this.rays;

        public IReadOnlyList<netDxf.Entities.Viewport> Viewports =>
            this.viewports;

        public IReadOnlyList<XLine> XLines =>
            this.xlines;

        public IReadOnlyList<Wipeout> Wipeouts =>
            this.wipeouts;

        public VPort Viewport =>
            this.vports["*Active"];

        public string ActiveLayout
        {
            get => 
                this.activeLayout;
            set
            {
                if (!this.layouts.Contains(value))
                {
                    throw new ArgumentException("The layout " + value + " does not exist.", "value");
                }
                this.activeLayout = value;
            }
        }

        public netDxf.Objects.RasterVariables RasterVariables
        {
            get => 
                this.rasterVariables;
            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("value");
                }
                if (string.IsNullOrEmpty(value.Handle))
                {
                    this.NumHandles = value.AsignHandle(this.NumHandles);
                }
                this.AddedObjects.Add(value.Handle, value);
                this.rasterVariables = value;
            }
        }
    }
}

